[
    {
        "ep_type": "tls_callback_0",
        "start_addr": "0xba5480",
        "ep_args": [
            "0x400000",
            "0x1",
            "0x0"
        ],
        "apihash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "apis": [],
        "ret_val": "0x0",
        "error": {},
        "dynamic_code_segments": []
    },
    {
        "ep_type": "module_entry",
        "start_addr": "0xb64536",
        "ep_args": [
            "0x4000",
            "0x4010",
            "0x4020",
            "0x4030"
        ],
        "apihash": "b1e706f5c85ef8d1ca3243936f4923064186bcd6e4e79dbb7c76a7860be7eb26",
        "apis": [
            {
                "pc": "0xb65062",
                "api_name": "KERNEL32.GetSystemTimeAsFileTime",
                "args": [
                    "0x95b3fdc"
                ],
                "ret_val": null
            },
            {
                "pc": "0xb6506e",
                "api_name": "KERNEL32.GetCurrentProcessId",
                "args": [],
                "ret_val": "0x8c8"
            },
            {
                "pc": "0xb65076",
                "api_name": "KERNEL32.GetCurrentThreadId",
                "args": [],
                "ret_val": "0x8dc"
            },
            {
                "pc": "0xb6507e",
                "api_name": "KERNEL32.GetTickCount",
                "args": [],
                "ret_val": "0x5265c14"
            },
            {
                "pc": "0xb6508a",
                "api_name": "KERNEL32.QueryPerformanceCounter",
                "args": [
                    "0x95b3fd4"
                ],
                "ret_val": "0x1"
            },
            {
                "pc": "0xb64294",
                "api_name": "KERNEL32.GetStartupInfoA",
                "args": [
                    "0x95b3f80"
                ],
                "ret_val": null
            },
            {
                "pc": "0xb642ba",
                "api_name": "KERNEL32.InterlockedCompareExchange",
                "args": [
                    "0x926abf8",
                    "0x95b4000",
                    "0x0"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0xb6430a",
                "api_name": "MSVCR90._initterm_e",
                "args": [
                    "0xed7c88",
                    "0xed7c9c"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0xb64333",
                "api_name": "MSVCR90._initterm",
                "args": [
                    "0xe6a844",
                    "0xed7c84"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0xb6434b",
                "api_name": "KERNEL32.InterlockedExchange",
                "args": [
                    "0x926abf8",
                    "0x0"
                ],
                "ret_val": "0x95b4000"
            }
        ],
        "ret_val": "0xfeedf6c8",
        "error": {
            "type": "Invalid memory read (UC_ERR_READ_UNMAPPED)",
            "pc": "0xb641c9",
            "address": "0xb641c9",
            "instr": "mov edi, edi",
            "regs": {
                "esp": "0x095b3f5c",
                "ebp": "0x095b3fe8",
                "eip": "0x00b641c9",
                "esi": "0x00000000",
                "edi": "0x0926abf8",
                "eax": "0xfeedf6c8",
                "ebx": "0xffffffff",
                "ecx": "0x00ed7c84",
                "edx": "0x00000000"
            },
            "stack": [
                "sp+0x00: 0xfeedf004",
                "sp+0x04: 0x00004690 -> emu.struct.EXCEPTION_RECORD.0x4690",
                "sp+0x08: 0x095b3fd8 -> emu.stack.0x95a2000",
                "sp+0x0c: 0x000046f0 -> emu.struct.EXCEPTION_CONTEXT.0x46f0",
                "sp+0x10: 0x00000000",
                "sp+0x14: 0x6e61a0d4",
                "sp+0x18: 0x00000000",
                "sp+0x1c: 0x00000000",
                "sp+0x20: 0x00000000",
                "sp+0x24: 0x00000044",
                "sp+0x28: 0x00000000",
                "sp+0x2c: 0x00004600 -> api.struct.STARTUPINFOA.lpDesktop.0x4600",
                "sp+0x30: 0x00004620 -> api.struct.STARTUPINFOA.lpTitle.0x4620",
                "sp+0x34: 0x00000000",
                "sp+0x38: 0x00000000",
                "sp+0x3c: 0x00000000"
            ],
            "traceback": "Traceback (most recent call last):\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/speakeasy/windows/winemu.py\", line 437, in start\n    count=self.max_instructions)\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/speakeasy/engines/unicorn_eng.py\", line 203, in start\n    return self.emu.emu_start(addr, 0xFFFFFFFF, timeout=timeout, count=count)\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/unicorn/unicorn.py\", line 318, in emu_start\n    raise UcError(status)\nunicorn.unicorn.UcError: Invalid memory read (UC_ERR_READ_UNMAPPED)\n"
        },
        "handled_exceptions": [
            {
                "pc": "0xb64379",
                "instr": "mov al, byte ptr [esi]",
                "exception_code": "0xc0000005",
                "handler_address": "0xb641c9",
                "registers": {
                    "esp": "0x095b3f5c",
                    "ebp": "0x095b3fe8",
                    "eip": "0x00b64379",
                    "esi": "0x00000000",
                    "edi": "0x0926abf8",
                    "eax": "0xfeedf6c8",
                    "ebx": "0x00000000",
                    "ecx": "0x00ed7c84",
                    "edx": "0x00000000"
                }
            }
        ],
        "dynamic_code_segments": []
    }
]