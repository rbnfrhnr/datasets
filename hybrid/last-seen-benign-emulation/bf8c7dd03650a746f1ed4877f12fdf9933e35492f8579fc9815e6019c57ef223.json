[
    {
        "ep_type": "tls_callback_0",
        "start_addr": "0x45f6b0",
        "ep_args": [
            "0x400000",
            "0x1",
            "0x0"
        ],
        "apihash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "apis": [],
        "ret_val": "0x1",
        "error": {},
        "dynamic_code_segments": []
    },
    {
        "ep_type": "module_entry",
        "start_addr": "0x4ac712",
        "ep_args": [
            "0x4000",
            "0x4010",
            "0x4020",
            "0x4030"
        ],
        "apihash": "8e15f74357e1160385b9252cf63761d4afc9adffbef58d3faafcf99149430ac6",
        "apis": [
            {
                "pc": "0x4acb5f",
                "api_name": "KERNEL32.GetSystemTimeAsFileTime",
                "args": [
                    "0x1211fdc"
                ],
                "ret_val": null
            },
            {
                "pc": "0x4acb6b",
                "api_name": "KERNEL32.GetCurrentProcessId",
                "args": [],
                "ret_val": "0x16d0"
            },
            {
                "pc": "0x4acb73",
                "api_name": "KERNEL32.GetCurrentThreadId",
                "args": [],
                "ret_val": "0x16e4"
            },
            {
                "pc": "0x4acb7b",
                "api_name": "KERNEL32.GetTickCount",
                "args": [],
                "ret_val": "0x5265c14"
            },
            {
                "pc": "0x4acb87",
                "api_name": "KERNEL32.QueryPerformanceCounter",
                "args": [
                    "0x1211fd4"
                ],
                "ret_val": "0x1"
            },
            {
                "pc": "0x4ac473",
                "api_name": "KERNEL32.GetStartupInfoA",
                "args": [
                    "0x1211f80"
                ],
                "ret_val": null
            },
            {
                "pc": "0x4ac499",
                "api_name": "KERNEL32.InterlockedCompareExchange",
                "args": [
                    "0x4e1ae4",
                    "0x1212000",
                    "0x0"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0x4ac4e9",
                "api_name": "MSVCR80._initterm_e",
                "args": [
                    "0x4b5638",
                    "0x4b5648"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0x4ac512",
                "api_name": "MSVCR80._initterm",
                "args": [
                    "0x4b55e8",
                    "0x4b5634"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0x4ac52a",
                "api_name": "KERNEL32.InterlockedExchange",
                "args": [
                    "0x4e1ae4",
                    "0x0"
                ],
                "ret_val": "0x1212000"
            }
        ],
        "ret_val": "0xfeedf404",
        "error": {
            "type": "Invalid memory read (UC_ERR_READ_UNMAPPED)",
            "pc": "0x4ac77d",
            "address": "0x4ac77d",
            "instr": "push dword ptr [esp + 0x10]",
            "regs": {
                "esp": "0x01211f5c",
                "ebp": "0x01211fe8",
                "eip": "0x004ac77d",
                "esi": "0x00000000",
                "edi": "0x004e1ae4",
                "eax": "0xfeedf404",
                "ebx": "0xffffffff",
                "ecx": "0x004b5634",
                "edx": "0x00000000"
            },
            "stack": [
                "sp+0x00: 0xfeedf004",
                "sp+0x04: 0x00004690 -> emu.struct.EXCEPTION_RECORD.0x4690",
                "sp+0x08: 0x01211fd8 -> emu.stack.0x1200000",
                "sp+0x0c: 0x000046f0 -> emu.struct.EXCEPTION_CONTEXT.0x46f0",
                "sp+0x10: 0x00000000",
                "sp+0x14: 0x534df7a4",
                "sp+0x18: 0x00000000",
                "sp+0x1c: 0x00000000",
                "sp+0x20: 0x00000000",
                "sp+0x24: 0x00000044",
                "sp+0x28: 0x00000000",
                "sp+0x2c: 0x00004600 -> api.struct.STARTUPINFOA.lpDesktop.0x4600",
                "sp+0x30: 0x00004620 -> api.struct.STARTUPINFOA.lpTitle.0x4620",
                "sp+0x34: 0x00000000",
                "sp+0x38: 0x00000000",
                "sp+0x3c: 0x00000000"
            ],
            "traceback": "Traceback (most recent call last):\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/speakeasy/windows/winemu.py\", line 437, in start\n    count=self.max_instructions)\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/speakeasy/engines/unicorn_eng.py\", line 203, in start\n    return self.emu.emu_start(addr, 0xFFFFFFFF, timeout=timeout, count=count)\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/unicorn/unicorn.py\", line 318, in emu_start\n    raise UcError(status)\nunicorn.unicorn.UcError: Invalid memory read (UC_ERR_READ_UNMAPPED)\n"
        },
        "handled_exceptions": [
            {
                "pc": "0x4ac558",
                "instr": "mov al, byte ptr [esi]",
                "exception_code": "0xc0000005",
                "handler_address": "0x4ac77d",
                "registers": {
                    "esp": "0x01211f5c",
                    "ebp": "0x01211fe8",
                    "eip": "0x004ac558",
                    "esi": "0x00000000",
                    "edi": "0x004e1ae4",
                    "eax": "0xfeedf404",
                    "ebx": "0x00000000",
                    "ecx": "0x004b5634",
                    "edx": "0x00000000"
                }
            }
        ],
        "dynamic_code_segments": []
    }
]