[
    {
        "ep_type": "tls_callback_0",
        "start_addr": "0x425680",
        "ep_args": [
            "0x400000",
            "0x1",
            "0x0"
        ],
        "apihash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
        "apis": [],
        "ret_val": "0x0",
        "error": {},
        "dynamic_code_segments": []
    },
    {
        "ep_type": "module_entry",
        "start_addr": "0x4237c8",
        "ep_args": [
            "0x4000",
            "0x4010",
            "0x4020",
            "0x4030"
        ],
        "apihash": "1d6069609263d3dd101a7bbdc953f9ebbbd57bdb68ed0306408104079a65e98a",
        "apis": [
            {
                "pc": "0x423df6",
                "api_name": "KERNEL32.GetSystemTimeAsFileTime",
                "args": [
                    "0x1211fdc"
                ],
                "ret_val": null
            },
            {
                "pc": "0x423e02",
                "api_name": "KERNEL32.GetCurrentProcessId",
                "args": [],
                "ret_val": "0xb86c"
            },
            {
                "pc": "0x423e0a",
                "api_name": "KERNEL32.GetCurrentThreadId",
                "args": [],
                "ret_val": "0xb880"
            },
            {
                "pc": "0x423e12",
                "api_name": "KERNEL32.GetTickCount",
                "args": [],
                "ret_val": "0x5265c14"
            },
            {
                "pc": "0x423e1e",
                "api_name": "KERNEL32.QueryPerformanceCounter",
                "args": [
                    "0x1211fd4"
                ],
                "ret_val": "0x1"
            },
            {
                "pc": "0x4235a6",
                "api_name": "KERNEL32.HeapSetInformation",
                "args": [
                    "0x0",
                    "0x1",
                    "0x0",
                    "0x0"
                ],
                "ret_val": "0x1"
            },
            {
                "pc": "0x4235c3",
                "api_name": "KERNEL32.InterlockedCompareExchange",
                "args": [
                    "0x445984",
                    "0x1212000",
                    "0x0"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0x423614",
                "api_name": "MSVCR100._initterm_e",
                "args": [
                    "0x437488",
                    "0x437498"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0x423649",
                "api_name": "MSVCR100._initterm",
                "args": [
                    "0x4373cc",
                    "0x437484"
                ],
                "ret_val": "0x0"
            },
            {
                "pc": "0x423662",
                "api_name": "KERNEL32.InterlockedExchange",
                "args": [
                    "0x445984",
                    "0x0"
                ],
                "ret_val": "0x1212000"
            }
        ],
        "ret_val": "0x0",
        "error": {
            "type": "Invalid memory read (UC_ERR_READ_UNMAPPED)",
            "pc": "0x42f790",
            "address": "0x42f790",
            "instr": "mov edx, dword ptr [esp + 8]",
            "regs": {
                "esp": "0x01211ae4",
                "ebp": "0x01211b30",
                "eip": "0x0042f790",
                "esi": "0xfeedf160",
                "edi": "0x00000020",
                "eax": "0x00000000",
                "ebx": "0xffffffff",
                "ecx": "0x004379fd",
                "edx": "0xfeedf100"
            },
            "stack": [
                "sp+0x00: 0xfeedf004",
                "sp+0x04: 0x00004610 -> emu.struct.EXCEPTION_RECORD.0x4610",
                "sp+0x08: 0x01211b24 -> emu.stack.0x1200000",
                "sp+0x0c: 0x00004670 -> emu.struct.EXCEPTION_CONTEXT.0x4670",
                "sp+0x10: 0x00000000",
                "sp+0x14: 0xbee43073",
                "sp+0x18: 0x0000000f",
                "sp+0x1c: 0x00000001",
                "sp+0x20: 0x00000000",
                "sp+0x24: 0x00000000",
                "sp+0x28: 0x00000000",
                "sp+0x2c: 0x00000000",
                "sp+0x30: 0x00000000",
                "sp+0x34: 0x00000000",
                "sp+0x38: 0x00000000",
                "sp+0x3c: 0x00004600 -> emu.struct.EXCEPTION_POINTERS.0x4600"
            ],
            "traceback": "Traceback (most recent call last):\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/speakeasy/windows/winemu.py\", line 437, in start\n    count=self.max_instructions)\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/speakeasy/engines/unicorn_eng.py\", line 203, in start\n    return self.emu.emu_start(addr, 0xFFFFFFFF, timeout=timeout, count=count)\n  File \"/home/robin/venvs/ember-venv/lib/python3.7/site-packages/unicorn/unicorn.py\", line 318, in emu_start\n    raise UcError(status)\nunicorn.unicorn.UcError: Invalid memory read (UC_ERR_READ_UNMAPPED)\n"
        },
        "handled_exceptions": [
            {
                "pc": "0x402886",
                "instr": "mov eax, dword ptr [eax + 4]",
                "exception_code": "0xc0000005",
                "handler_address": "0x42f790",
                "registers": {
                    "esp": "0x01211ae4",
                    "ebp": "0x01211b30",
                    "eip": "0x00402886",
                    "esi": "0xfeedf160",
                    "edi": "0x00000020",
                    "eax": "0x00000000",
                    "ebx": "0x00000000",
                    "ecx": "0x004379fd",
                    "edx": "0xfeedf100"
                }
            }
        ],
        "dynamic_code_segments": []
    }
]